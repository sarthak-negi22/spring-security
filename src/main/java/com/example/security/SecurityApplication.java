package com.example.security;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SecurityApplication {

	public static void main(String[] args) {
		SpringApplication.run(SecurityApplication.class, args);
	}

}

// Without JWT:
// 1) no advanced features like expiration time, if someone is authorized, he/she cant be deauthorized unless he/she does it on its own.
// 2) hashing can be decoded easily
// 3) should we go for custom token system - when a user authorizes, instead of asking his username and password always, he gets a token and whenever user gets access to the website again, he can get access via token without the need of entering credentials again and again; however it doesnt have any "generalization" for making a custom token.

// JWT = JSON Web Token - an open industry standard token system. Working:
// 1) user tries to login in server
// 2) token is generated by server
// 3) token is issued to user
// 4) token is sent in API requests by user
// 5) token is checked for validation in the server
// 6) server authorized the request if token is valid, else throw error

// tokens are sent using HTTP Authorization header
// Format: Authorization:Bearer<token>

// JWT token consists of 3 parts:
// 1)  Header: consists of two parts: type of token used (JWT here) and sign-in the token algo used
// 2) payload: contains user info like user id, permissions, any metadata
// 3) signature: appended in the end of entire token